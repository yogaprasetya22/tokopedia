// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
  seed     = "src/seed.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Product {
  id             String    @id @default(uuid())
  name           String
  slug           String    @unique
  description    String?
  price          Float
  discount_price Float
  discount       Float
  rating         Float
  estimation     String
  stock          Int
  sold           Int
  isForSale      Boolean
  isApproved     Boolean
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  imageUrls      String[]
  categoryId     String?
  category       Category? @relation(fields: [categoryId], references: [id])
  // toko
  tokoId         String?
  toko           Toko?     @relation(fields: [tokoId], references: [id])

  // Indeks pada kolom yang sering digunakan dalam pencarian
  @@index([name])
  @@index([isApproved])
  @@index([slug])
  @@index([categoryId])
}

model Toko {
  id            String    @id @default(uuid())
  slug          String    @unique
  name          String
  image_profile String?
  country        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // products
  products      Product[] // One-to-many relationship: One toko can have many products
  // user
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])

  @@index([slug])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  products    Product[] // One-to-many relationship: One category can have many products

  @@index([slug])
}

model User {
  id             String   @id @default(uuid()) // Primary key, unique, and generated by the database
  googleId       String?  @unique @db.VarChar(255) // Optional, unique, and varchar(255) based on the common usage for Google IDs
  email          String   @unique @db.VarChar(255) // Required, unique, and varchar(255) based on the common usage for email fields
  password       String?  @db.VarChar(255) // Optional, varchar(255) to store hashed passwords
  displayName    String   @db.VarChar(255) // Required, varchar(255) to match typical display name lengths
  profilePicture String?  @db.VarChar(255) // Optional field, varchar(255) to store image URLs or file paths
  isPremium      Boolean  @default(false) // Default value is false
  createdAt      DateTime @default(now()) // Default value is the current timestamp
  updatedAt      DateTime @updatedAt // Updated automatically when the record is updated
  toko           Toko[]

  @@map("users") // Mapping to the "users" table
}

model Session {
  id        String   @id @default(cuid()) // ID sesi
  sid       String   @unique
  data      String
  expiresAt DateTime

  // @@index([expiresAt], name: "idx_expires_at")
}
